Go Serverless
From POC to Prod
27 Aug 2018
Tags: go, golang, aws, serverless

Steven Bogacz
Software Engineer at SendGrid
steven@bogacz.io
https://bogacz.io
@bogaczio

* Our Goals

- Have a serverless app in AWS
- Idiomatic and approachable Go code
- Easy to test and iterate on
- Flexible deployment

Let's work toward them with a toy app

* What are we trying to build?

We want a lightweight, ephemeral storage API

- Create blob
- Retrieve blob
- Delete blob
- All blobs can hang around for a day, somewhat flexible on expiration
- ...and we want it... in the CLOUD!

* We choose the AWS stack, for reasons

- APIGW + Lambda to serve the code
- Lambda has had Go support since the start of 2018
- S3 will be our storage backend
- Lifecycle policies can handle the expiration for us

* Time to POC!

- Native Go Lambda support with API Gateway isn't quite like using the standard `net/http` library. 
- Handler interface requires a `json.Encode`-able object, which precludes using stdlib (unexported fields)
- `aws-lambda-go/events` has objects for proxy API Gateway Requests/Responses

In our case, that looks like

 Handler(*events.APIGatewayProxyRequest) (*events.APIGatewayProxyResponse, error)

.link https://docs.aws.amazon.com/lambda/latest/dg/go-programming-model-handler-types.html AWS Lambda Handler Documentation

* POC Handler Code

Using the `events.APIGatewayProxyRequest` type directly: 
.code first/main.go /SWITCH OMIT/,/ENDSWITCH OMIT/

* POC POST Code

Some decoupling:

.code first/main.go /func post/,/}

Sub-functions don't know about APIGW-specific types

* POC tests

Using a normal testing approach, we can unit test some helpers

.code first/main_test.go /^func Test/,

This makes us use dummy input, and doesn't give us great coverage

* Fully testing the POC 

We use Terraform (a cloud-agnostic Infrastructure-as-Code tool)

Initial deploy

  terraform apply phase1.plan

  33.54s

Subsequent plan and apply

  terraform plan --out=phase1.plan

  12.54

  terraform apply phase1.plan

  19.12

.link https://terraform.io Terraform 

* One approach to lower the dev cycle time

Can take a look at: 

.link https://github.com/localstack/localstack Localstack 

Supports several locally running versions of AWS Services
- API Gateway
- DynamoDB
- Kinesis
- S3
- etc.

* One approach to lower the dev cycle time

Configuring our deployment isn't exactly trivial. 

Could use terraform, but there's a current issue open to get the AWS fakes to work:

.link https://github.com/terraform-providers/terraform-provider-aws/issues/5584 Terraform Provider Open Issue

Can have set up scripts to run before we run our tests, e.g. `make` `test` spins up, `go` `test` s, spins down.

Downsides: 

- Lots of overhead to set up (especially without Terraform)
- No guarantee APIs will behave exactly as they do in AWS
- Lack of IAM, and other such services can make this a partial solution at best

* A better approach

Ask how would I do this as idiomatically as possible?

- `net/http` is Go's bread and butter
- We know how to test HTTP Servers in Go
- We can abstract the store

* A better approach - Our original layout

.code tree_poc.txt ,

* A better approach - Our new layout

.code tree_refactor.txt ,

* A better approach - Our new server

Now we have a server struct

.code third/internal/toy/server.go / Server/,/^}/

Where `Store` is

.code third/internal/toy/store.go / Store/,/^}/

* A better approach - Server Start 

Starting the server looks familiar 

.code third/internal/toy/server.go / Start/,/^}/

* A better approach - Two Store implementations
Local

.code third/internal/toy/local_store.go / LocalStore/,/^}/

S3

.code third/internal/s3store/s3_store.go / S3Store/,/^}/

* A better approach - Now with HTTP tests!

With a little setup of our server

.code third/internal/toy/server_test.go / TestMain/,/^}/

* A better approach - Now with HTTP tests!

Now we can write more thorough tests in a familiar way

.code third/internal/toy/server_test.go /testBlob/,/}\)/

* A better approach - Lambda

It's great that our code and tests look a little more stdlib-ish, but how does that translate to our actual deployment, i.e. Lambda???

We can translate the `events.APIGatewayProxyRequest`, either by hand, or with:

.link https://github.com/awslabs/aws-lambda-go-api-proxy AWS Lambda Go API Proxy

You may have noticed two packages under `cmd`, `lambda` and `http`

* A better approach - Lambda

As long as we expose our Router

.code third/internal/toy/server.go / Router/,/^}/

we can change our `lambda/main.go` to set up the proxy adapter

.code third/cmd/lambda/main.go /chiLambda =/,/\)\)/

and call it in the Handler

.code third/cmd/lambda/main.go / Handler/,/^}/

* A better approach - Running locally	

  ./toy --local-store

Can curl locally, and get faster feedback
 
  curl -XPOST -d @key.json http://127.0.0.1:8080/blobs
  43823ea6-6f48-49c2-a798-47eb728e50a7

  0.02s

  curl http://127.0.0.1:8080/blobs/43823ea6-6f48-49c2-a798-47eb728e50a7
  {	"Name": { "S": "banana" }}

  0.01s

  curl -XDELETE -v http://127.0.0.1:8080/blobs/43823ea6-6f48-49c2-a798-47eb728e50a7
  *   Trying 127.0.0.1...
  ...
  < HTTP/1.1 204 No Content

  0.02s

* Can we do even better? 

What have we gained?

- More idiomatic code, or at least, less domain specific
- Fairly lightweight local tests leverage more of the code path
- Can run as either a HTTP server in a traditional deployment or AWS Lambda

We're flexible about what we're deployed on now, but what about our backend?

* Can we do even better? go-cloud

.link https://github.com/google/go-cloud go-cloud project

The go-cloud project aims to provide common interfaces to common services across cloud providers.
*BEAR* *TRAP* *ALERT* This means that they can only support common operations, wouldn't be helpful for more deployment-specific control *BEAR* *TRAP* *ALERT*

`Bucket` methods cover the functionality we had before

  func NewBucket(b driver.Bucket) *Bucket
  func (b *Bucket) Delete(ctx context.Context, key string) error
  func (b *Bucket) NewReader(ctx context.Context, key string) (*Reader, error)
  func (b *Bucket) NewWriter(ctx context.Context, key string, opt *WriterOptions) (*Writer, error)

We can even delete code!

* Can we do even better? go-cloud

.code tree_gocloud.txt ,

* Can we do even better? go-cloud

We can use the `fileblob` package for local tests and running locally

.code fourth/internal/toy/server_test.go /^func setupServer/,/^}/

* Can we do even better? go-cloud

Our locally running main can now support both backends... and it wouldn't be much work to support a third (e.g. Google Cloud Storage)

.code fourth/cmd/http/main.go /if localStore/,/go s\.Start/ 

* Recap

- Part 1: POC code, tightly coupled to AWS, hard to test
- Part 2: Try to use localstack to test, hard work to set up
- Part 3: Decouple bulk of logic from target deployment, only worry about incoming messages at the outer layer (`lambda/main.go`) using aws-lambda-go-api-proxy, use an interface for our backend to let us run locally in-memory
- Part 4: Remove our new store interface and replace it with go-cloud's `blob.Bucket`, allowing for the same advantages above, and to optionally support more providers in the future

* Questions?

.link https://github.com/sbogacz/gophercon18-kickoff-talk Talk material in GitHub
